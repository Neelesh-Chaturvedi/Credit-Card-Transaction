
-- 1- Write a query to print top 5 cities with highest spends and their percentage contribution of total credit card spends. 

with cte1 as (
SELECT 
    city, SUM(amount) AS highest_spend
 FROM
    credit_card_transcations
GROUP BY city
ORDER BY highest_spend DESC
LIMIT 5),

cte2 as (
SELECT 
    SUM(amount) AS total_spend
FROM
    credit_card_transcations)

SELECT 
    *, (highest_spend / total_spend * 100) AS pct_contribution
FROM
    cte1
        JOIN
    cte2;

-- 2- Write a query to print highest spend month and amount spent in that month for each card type.

with cte1 as (
SELECT 
card_type,
    year(transaction_date) as Year,
    MONTHNAME(transaction_date) AS Month,
    SUM(amount) spend
FROM
    credit_card_transcations
    
GROUP BY card_type, Year, Month
ORDER BY spend DESC , month)

select 
	card_type, Year, Month, spend
from (
		select *, 
		rank() over(PARTITION BY card_type order by spend DESC) as rn 
		from cte1 
	  ) a
WHERE
    rn = 1;

-- 3- Write a query to print the transaction details(all columns from the table) for each card type when it reaches a cumulative of 1000000 total spends(We should have 4 rows in the o/p one for each card type).

WITH cte1 AS (
    SELECT *,
           SUM(amount) OVER(PARTITION BY card_type ORDER BY transaction_date, transaction_id) AS cum_sum
    FROM credit_card_transcations
),
filtered AS (
    SELECT *,
           RANK() OVER(PARTITION BY card_type ORDER BY cum_sum ASC) AS rn
    FROM cte1
    WHERE cum_sum >= 1000000
)
SELECT *
FROM filtered
WHERE rn = 1;

-- 4- Write a query to find city which had lowest percentage spend for gold card type.

with cte1 as (
SELECT 
    city, SUM(amount) AS total_amount
FROM
    credit_card_transcations
GROUP BY city)
,

cte2 as
(SELECT 
    city, SUM(amount) AS gold_amount
FROM
    credit_card_transcations
WHERE
    card_type = 'GOLD'
GROUP BY city)

SELECT 
    cte1.city,
    gold_amount,
    total_amount,
    (gold_amount / total_amount) * 100 AS gold_pct
FROM
    cte1
        JOIN
    cte2 ON cte1.city = cte2.city
ORDER BY gold_pct ASC LIMIT 1;     


-- 5- Write a query to print 3 columns:  city, highest_expense_type , lowest_expense_type (example format : Delhi , bills, Fuel).

with cte1 as (
SELECT 
    city, exp_type, SUM(amount) AS total_spend
FROM
    credit_card_transcations
GROUP BY city , exp_type), 

cte2 as (
	select *,
	rank() over(partition by city order by total_spend desc) rn_high,
	rank() over(partition by city order by total_spend) rn_low
from cte1)

SELECT 
    city,
    MAX(CASE
        WHEN rn_high = 1 THEN exp_type
    END) AS highest_expense_type,
    MAX(CASE
        WHEN rn_low = 1 THEN exp_type
    END) AS lowest_expense_type
FROM
    cte2
WHERE
    rn_high = 1 OR rn_low = 1
GROUP BY city;


-- 6- Write a query to find percentage contribution of spends by females for each expense type.

with cte1 as 
(SELECT 
    exp_type, SUM(amount) AS total_amount
FROM
    credit_card_transcations
GROUP BY exp_type),

cte2 as (SELECT 
    SUM(amount) AS female_contribution, exp_type
FROM
    credit_card_transcations
WHERE
    gender = 'F'
GROUP BY exp_type)

SELECT 
    cte1.exp_type,
    total_amount,
    female_contribution,
    ROUND(((female_contribution / total_amount) * 100),
            2) AS female_contri_pct
FROM
    cte1
        JOIN
    cte2 ON cte1.exp_type = cte2.exp_type;  


-- 7- Which card and expense type combination saw highest month over month growth in Jan-2014.

WITH cte AS (
  SELECT 
    card_type,
    exp_type,
    YEAR(transaction_date) AS yt,
    MONTH(transaction_date) AS mt,
    SUM(amount) AS total_spend
  FROM credit_card_transcations
  GROUP BY 
    card_type,
    exp_type,
    YEAR(transaction_date),
    MONTH(transaction_date)
),
cte_with_lag AS (
  SELECT 
    *,
    LAG(total_spend, 1) OVER (PARTITION BY card_type, exp_type ORDER BY yt, mt) AS prev_mont_spend
  FROM cte
)
SELECT *,
       (total_spend - prev_mont_spend) AS mom_growth
FROM cte_with_lag
WHERE prev_mont_spend;


-- 8- During weekends which city has highest total spend to total no of transactions ratio.

SELECT 
    city, SUM(amount) / COUNT(*) AS ratio
FROM
    credit_card_transcations
WHERE
    DAYOFWEEK(transaction_date) IN (1 , 7)
GROUP BY city
ORDER BY ratio DESC LIMIT 1;


-- 9- Which city took least number of days to reach its 500th transaction after the first transaction in that city.

WITH cte AS (
    SELECT *,
           ROW_NUMBER() OVER(PARTITION BY city ORDER BY transaction_date, transaction_id) AS rn
    FROM credit_card_transcations
)
SELECT 
    city,
    MIN(transaction_date) AS first_transaction,
    MAX(transaction_date) AS last_transaction,
    DATEDIFF(MAX(transaction_date), MIN(transaction_date)) AS days_to_500
FROM cte
WHERE rn IN (1, 500)
GROUP BY city
HAVING COUNT(*) = 2
ORDER BY days_to_500 ASC;
















